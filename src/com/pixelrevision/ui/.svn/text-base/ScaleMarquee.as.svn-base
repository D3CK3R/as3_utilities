package com.pixelrevision.ui {		/**	 * @class ScaleMarquee	 * @description Creates a sprite that allows scaling of another sprite. 	 * @author pixelrevision	 * @version 1.0	 */		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		public class ScaleMarquee extends Sprite {				private var _item:DisplayObject;		private var _currentTarget:Object;		private var _constrained:Boolean;				protected var _tl:Sprite;		protected var _tm:Sprite;		protected var _tr:Sprite;				protected var _ml:Sprite;		protected var _mr:Sprite;				protected var _bl:Sprite;		protected var _bm:Sprite;		protected var _br:Sprite;				protected var _lastMouseX:Number;		protected var _lastMouseY:Number;		protected var _lastWidth:Number;		protected var _lastHeight:Number;		protected var _centerX:Number;		protected var _centerY:Number;		protected var _boundBox:Sprite;				public var scaling:Boolean;				public function ScaleMarquee(itemToScale:DisplayObject){			super();			_boundBox = new Sprite();			addChild(_boundBox);						_tl = drawSquare();			_tm = drawSquare();			_tr = drawSquare();						_ml = drawSquare();			_mr = drawSquare();						_bl = drawSquare();			_bm = drawSquare();			_br = drawSquare();						item = itemToScale;			addEventListener("added", added);			addEventListener("removed", removed);			updatePoints();			drawBoundBox();		}				private function added(e:Event):void{			stage.addEventListener("mouseUp", stopScaling);			stage.addEventListener("mouseLeave", stopScaling);			addEventListener("enterFrame", update);		}		private function removed(e:Event):void{			stage.removeEventListener("mouseUp", stopScaling);			stage.removeEventListener("mouseLeave", stopScaling);			removeEventListener("enterFrame", update);		}						protected function drawSquare():Sprite{			var square:Sprite = new Sprite();			square.graphics.lineStyle(1, 0X000000);			square.graphics.beginFill(0XFFFFFF);			square.graphics.drawRect(-3, -3, 6, 6);			square.buttonMode = true;			square.addEventListener("mouseDown", startScaling);			addChild(square);			return square;		}				private function startScaling(e:MouseEvent):void{			updatePoints();			scaling = true;			_currentTarget = e.currentTarget;		}		private function stopScaling(e:MouseEvent):void{			scaling = false;		}				private function update(e:Event = null):void{			scaleItem();			updatePoints();			drawBoundBox();		}				protected function updatePoints():void{			// set the top positions			_tl.x = _item.x;			_tl.y = _item.y;			_tm.x = _item.x + _item.width/2;			_tm.y = _item.y;			_tr.x = _item.x + _item.width;			_tr.y = _item.y;			// set the middle positions			_ml.x = _item.x;			_ml.y = _item.y + _item.height/2;			_mr.x = _item.x + _item.width;			_mr.y = _item.y + _item.height/2;			// set the bottom positions			_bl.x = _item.x;			_bl.y = _item.y + _item.height;			_bm.x = _item.x + _item.width/2;			_bm.y = _item.y + _item.height;			_br.x = _item.x + _item.width;			_br.y = _item.y + _item.height;		} 				protected function drawBoundBox():void{			_boundBox.graphics.clear();			_boundBox.graphics.lineStyle(1, 0X666666);			_boundBox.graphics.drawRect(_item.x, _item.y, _item.width, _item.height);		}				protected function scaleItem():void{			var offsetX:Number = mouseX - _lastMouseX;			var offsetY:Number = mouseY - _lastMouseY;						if(scaling){				if(!_constrained){					// rescale the image					if(_currentTarget == _tl || _currentTarget == _ml || _currentTarget == _bl){						_item.x += offsetX;						_item.width -= offsetX;					}					if(_currentTarget == _tl || _currentTarget == _tm || _currentTarget == _tr){						_item.y += offsetY;						_item.height -= offsetY;					}									if(_currentTarget == _mr || _currentTarget == _tr || _currentTarget == _br){						_item.width += offsetX;					}					if( _currentTarget == _bl || _currentTarget == _bm || _currentTarget == _br){						_item.height += offsetY;					}				}else{					// if it is constrained to center					var percent:Number;									if(_currentTarget == _ml || _currentTarget == _mr){						_currentTarget == _ml ? _item.width -= offsetX : _item.width += offsetX;						percent = _item.width/_lastWidth;						_item.height = _lastHeight * percent;					}else if(_currentTarget == _tm || _currentTarget == _bm){						_currentTarget == _tm ? _item.height -= offsetY : _item.height += offsetY;						percent = _item.height/_lastHeight;						_item.width = _lastWidth * percent;					}else{						if(Math.abs(offsetY) > Math.abs(offsetX) ){							_currentTarget == _tl || _currentTarget == _tr ? _item.height -= offsetY : _item.height += offsetY;							percent = _item.height/_lastHeight;							_item.width = _lastWidth * percent;						}else{							_currentTarget == _tl || _currentTarget == _bl ? _item.width -= offsetX : _item.width += offsetX;							percent = _item.width/_lastWidth;							_item.height = _lastHeight * percent;						}					}					_item.x = _centerX - (_item.width/2);					_item.y = _centerY - (_item.height/2);					}				dispatchEvent( new Event("scaledItem") );			}						_lastMouseX = mouseX;			_lastMouseY = mouseY;			_lastWidth = _item.width;			_lastHeight = _item.height;			_centerX = _item.x + (_item.width/2);			_centerY = _item.y + (_item.height/2);		}				/**		 * If the marquee forces constraint of the sprite's dimensions.			 */			public function set constrained(value:Boolean):void{			_constrained = value;		}		public function get constrained():Boolean{			return _constrained;		}				/**		 * The item to scale.			 */		public function set item(value:DisplayObject):void{			_item = value;			_lastMouseX = mouseX;			_lastMouseY = mouseY;			_lastWidth = _item.width;			_lastHeight = _item.height;			_centerX = _item.x + (_item.width/2);			_centerY = _item.y + (_item.height/2);			update();		}		public function get item():DisplayObject{			return _item;		} 	}}