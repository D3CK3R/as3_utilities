package com.pixelrevision.effects{		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.geom.Matrix;		/**	 * @class Reflection	 * @description Reflection of a display object.	 * @author pixelrevision	 * @version 1.0	 * 	 */		public class Reflection extends Sprite{				protected var _target:DisplayObject;		protected var _reflectClip:Bitmap;		protected var _reflectMask:Sprite;				protected var _distanceReflected:Number;		protected var _alpha1:Number;		protected var _alpha2:Number;		protected var _distance:Number;				public function Reflection(reflectClip:DisplayObject, distanceReflected:Number = 1, alpha1:Number = 1, alpha2:Number = 0, distance:Number = 0){						_distanceReflected = distanceReflected;			_alpha1 = alpha1;			_alpha2 = alpha2;			_distance = distance;						_target = reflectClip;						var bitmapData:BitmapData = new BitmapData(_target.width, _target.height, true, 0xFFFFFF);			_reflectClip = new Bitmap(bitmapData, "auto", true);			_reflectClip.cacheAsBitmap = true;			addChild(_reflectClip);						_reflectMask = new Sprite();			_reflectMask.cacheAsBitmap = true;			addChild(_reflectMask);						render();		}				protected function createMask():Sprite{			var drawMask:Sprite = new Sprite();			var fillType:String = GradientType.LINEAR;			var colors:Array = [0xFFFFFF, 0xFFFFFF];			var alphas:Array = [_alpha1, _alpha2];			var ratios:Array = [0x00, 0xFF];			var spreadMethod:String = SpreadMethod.PAD;			var matrix:Matrix = new Matrix();			var angle:Number = degreestoRadians(-90);			matrix.createGradientBox(_target.width, _distanceReflected * _target.height, angle, 0, 0);			drawMask.graphics.beginGradientFill(fillType, colors, alphas, ratios, matrix, spreadMethod);  			drawMask.graphics.drawRect(0, 0, _target.width, _distanceReflected * _target.height);			drawMask.cacheAsBitmap = true;			return drawMask;		}				protected function degreestoRadians(degrees:Number):Number{			 var radians:Number = degrees * Math.PI/180;			 return radians;		}				public function render():void{			// draw the bitmap			_reflectClip.bitmapData = new BitmapData(_target.width, _target.height, true, 0xFFFFFF);			_reflectClip.bitmapData.draw(_target);			// draw the mask			if( contains(_reflectMask) ){				removeChild(_reflectMask);			}			_reflectMask = createMask();			addChild(_reflectMask);			_reflectMask.y = _reflectClip.height - _reflectMask.height;						_reflectClip.mask = _reflectMask;			y = _target.y + _target.height + _reflectClip.height + _distance;			x = _target.x;			scaleY = -1;					}	}}