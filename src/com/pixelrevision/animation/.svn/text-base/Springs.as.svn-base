package com.pixelrevision.animation{		/**	 * @class	Springs	 * @description	Simple utility to help spring properties around.	 * @author	pixelrevision	 * @version	0.1	 */		public class Springs{				private var springs:Array;				/**		 * Creates the spring.		 */		public function Springs(){			springs = new Array();		}				/**		 * Adds a property to the cue to start springing		 * 		 * @param	object	The object to target.		 * @param	prop	The property to move.		 * @param	newPosition	The position to spring to.		 * @param	damp	The dampening (0 - 100). Default value is 90.		 * @param	k	spring coefficient (0 - 100). Default value is 20.		 * @param	watch	If set to true watches the springing modifier.  If the modifier gets below 0.00001 then it stops the spring.  		 * Helps avoid conflicts with other motion classes. Default value is true.		 */		public function moveTo(object:Object, prop:String, newPosition:Number, damp:Number=90, k:Number=20, watch:Boolean=true):void{			var createArray:Boolean = true;			var index:uint = 0;			// check to see if the property is already being sprung if it is overwrite it.			for(var i:uint=0; i<springs.length; i++){				if(springs[i]["prop"] == prop && springs[i]["object"] == object){					index = i;					createArray = false;				} 			}			// if there are no props create some			if(springs.length < 1 || createArray == true){				index = springs.length;				springs[index] = new Array();			}			// add in a new spring			springs[index]["watch"] = watch;			springs[index]["object"] = object;			springs[index]["prop"] = prop;			springs[index]["position"] = newPosition;			springs[index]["damp"] = damp/100;			springs[index]["k"] = k/100;			if(springs[index]["vx"] == undefined){				springs[index]["vx"] = 0;			}		}				/**		 * Renders all the springs in the cue		 */		public function render():void{			for(var i:uint=0; i<springs.length; i++){				// make the spring work with the current property				var currentProp:String = springs[i]["prop"];				var ax:Number = (springs[i]["position"] - springs[i]["object"][currentProp]) * springs[i]["k"];				springs[i]["vx"] += ax;				springs[i]["vx"] *= springs[i]["damp"];  				springs[i]["object"][currentProp] += springs[i]["vx"]; 								// watch for a small amount and add a completion if needed				if(Math.abs(springs[i]["vx"]) < 0.00001 && springs[i]["watch"] == true){					springs.splice(i, 1);				}			}		}					}}