package com.pixelrevision.display{		import flash.display.Sprite;	import flash.display.BitmapData;	import flash.geom.Matrix;	/**	 * @class patternFill	 * @description Tiles a bitmap texture gives the option for scrolling.	 * @author pixelrevision	 * @version 1.0	 */	public class PatternFill extends Sprite{				private var _targetBitmap:BitmapData;		private var _outputWidth:Number;		private var _outputHeight:Number;		private var _scaling:Number;		private var _oldScaling:Number;		private var _matrix:Matrix;		/**		 * Create a pattern from a source bitmap.		 * @param	targetBitmap	The pattern to use.		 * @param	width	The width of the output.		 * @param	height	The height of the output.		 */		public function PatternFill(targetBitmap:BitmapData, width:Number, height:Number){			// initialize			_targetBitmap = targetBitmap;			_outputWidth = width;			_outputHeight = height;			_scaling = 1;			_oldScaling = 1;			_matrix = new Matrix();						render();		}		/**		 * Update the output clip.		 */		public function render():void{			graphics.clear();			graphics.beginBitmapFill(_targetBitmap, _matrix, true, true);			graphics.lineTo(_outputWidth, 0);			graphics.lineTo(_outputWidth, _outputHeight);			graphics.lineTo(0, _outputHeight);			graphics.lineTo(0, 0);			graphics.endFill();		}		/**		 * The x offset of the pattern.		 */		public function get offsetX():Number{			return _matrix.tx;		}		public function set offsetX(value:Number):void{			_matrix.tx = value;			render();		}		/**		 * The y offset of the pattern.		 */		public function get offsetY():Number{			return _matrix.ty;		}		public function set offsetY(value:Number):void{			_matrix.ty = value;			render();		}		/**	 	 * Scaling offset		 */		public function get scaleOffset():Number{			return _scaling;		}		public function set scaleOffset(value:Number):void{			_scaling = value;			var offX:Number = offsetX;			var offY:Number = offsetY;			_matrix = new Matrix();			_matrix.scale(_scaling, _scaling);			_matrix.tx = offX;			_matrix.ty = offY;			render();		}					}}