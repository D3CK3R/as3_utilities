package com.pixelrevision.flickr {		import flash.events.EventDispatcher;	import flash.events.Event;		import flash.xml.*;	import flash.net.URLRequest;	import flash.net.URLLoader;		public class FlickrRequest extends EventDispatcher{				protected var _baseURL:String = "http://api.flickr.com/services/rest/?";				/**		 *	@constructor		 */		public function FlickrRequest(apiKey:String, method:String, parameters:Object):void{			super();			// start loading in the stuff from flicker			var params:String = "method=" + method + "&api_key=" + apiKey;			for(var data:String in parameters){				params += "&" + data + "=" + parameters[data];			}			var url:String = _baseURL + params;			var urlRequest:URLRequest = new URLRequest(url);			var urlLoader:URLLoader = new URLLoader(urlRequest);			urlLoader.addEventListener("complete", loadComplete);		}				protected function loadComplete(e:Event):void{			var returnedXML:XML = XML(e.currentTarget.data);			var responseEvent:FlickrResponseEvent;			// check for error			if( returnedXML.err.attribute("code").length() > 0){				// if there was an error generate an error message				trace( "#ERROR " + returnedXML.err.attribute("code") + " : " + returnedXML.err.attribute("msg") );				responseEvent = new FlickrResponseEvent("RequestError");			}else{				responseEvent = new FlickrResponseEvent("RequestComplete");			}			// if everything went ok broadcast an event			responseEvent.response = returnedXML;			dispatchEvent( responseEvent );		}	}}import flash.events.Event;internal class FlickrResponseEvent extends Event{	private var _response:XML;		public function FlickrResponseEvent(type:String, bubbles:Boolean = false, cancelable:Boolean = false){		super(type, bubbles, cancelable);	}		public function set response(value:XML):void{		_response = value;	}	public function get response():XML{		return _response;	}	}