package com.pixelrevision.utilities{	/**	* @class	ArrayHelper	* @description	Simple utility to help with common array tasks.	*	* @author	pixelrevision	* @version	0.1	*/		public class ArrayHelper{				/**		 * Checks to see if an item is in an array		 * @param	arrayToCheck	The array to look through.		 * @param	itemToLookUp	The item to find.		 */		public static function isInArray(arrayToCheck:Array, itemToLookUp:*) :Boolean{			for(var i:uint=0; i<arrayToCheck.length; i++){				if(arrayToCheck[i] == itemToLookUp){					return true;				}			}			return false;		}				/**		 * Returns the index of the specified item 		 * @param	arrayToCheck	The array to look through.		 * @param	itemToLookUp	The item to find.		 */		public static function itemIndex(arrayToCheck:Array, itemToLookUp:*):uint{			for(var i:uint=0; i<arrayToCheck.length; i++){				if(arrayToCheck[i] == itemToLookUp){					return i;				}			}			return 0;		}				/**		 * Inserts a value at a specified index and pushes the values after.		 * @param	array	The array to insert into.		 * @param	index	The index we want to use.		 * @param	value	The value we want to insert.		 */		public static function insertAt(array:Array, index:Number, value:*):Boolean{			if(index > array.length || index < 0){				return false;			}			array.splice(index, 0, value);			return true;		}				/**		 * Changes the index of a point in the array.		 * @param	array	The array to insert into.		 * @param	oldIndex	The old index value.		 * @param	newIndex	The new index value.		 */		public static function changeIndex(array:Array, oldIndex:Number, newIndex:Number):Boolean{			if(oldIndex > array.length || oldIndex < 0){				return false;			}			if(newIndex > array.length || newIndex < 0){				return false;			}			var valueA:* = array[oldIndex];			var valueB:* = array[newIndex];			array[newIndex] = valueA;			array[oldIndex] = valueB;			return true;		}							}}		