package com.pixelrevision.utilities{		/**	 * @class	Angles	 * @description	Simple utility to help with common rotation tasks.	 *	 * @author	pixelrevision	 * @version	0.5	 */		public class Angles{				/**		 * converts degrees to radians		 * @param	degrees	The degrees to convert		 * @return	Number	The radians.		 */		public static function degreestoRadians(degrees:Number):Number{			 var radians:Number = degrees * Math.PI/180;			 return radians;		}				/**		 * converts radians to degrees		 * @param	radians	The radians to convert		 * @return	Number	The degrees.		 */		public static function radiansToDegrees(radians:Number):Number{			var degrees:Number =  radians * 180/Math.PI;			return degrees;		}				/**		 * Gets a point based on rotation around another point		 * @param	startX	The x point to check rotation around.		 * @param	startX	The y point to check rotation around.		 * @param	rotation	The amount of rotation.		 * @param	distance	The distance from the point.		 * @return	Object	The x and y position of the rotated point.		 */		public static function getRotatedPoint(startX:Number, startY:Number, rotation:Number, distance:Number):Object{			var newRotation:Number = degreestoRadians(rotation);			var points:Object = new Object();			points.x = (Math.sin(newRotation) * distance) + startX;			points.y = (Math.cos(newRotation) * distance) + startY;			return points;		}				/**		 * Gets the distance between 2 points		 * @param	x1	Point 1 x position.		 * @param	y1	Point 1 y position.		 * @param	x2	Point 2 x position.		 * @param	y2	Point 2 y position.		 * @return	Number	The rotation of the line between Point 1 and Point 2.		 */		public static function getRotation(x1:Number, y1:Number, x2:Number, y2:Number):Number{			var angle:Number = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;			return angle;		}						/**		 * Gets the distance between 2 points		 * @param	x1	Point 1 x position.		 * @param	y1	Point 1 y position.		 * @param	x2	Point 2 x position.		 * @param	y2	Point 2 y position.		 * @return	Number	The distance between Point 1 and Point 2.		 */		public static function getDistance(x1:Number, y1:Number, x2:Number, y2:Number):Number{			var distance:Number = Math.sqrt(Math.pow( (x1-x2), 2)+Math.pow( (y1-y2), 2));			return distance;		}				/**		 * Forces an amount between 0-360.		 * @param	amount	The amount to convert		 * @return	Number	The degrees(0-360).		 */		public static function getDegrees(amount:Number):Number{			var convertedDegrees:Number = amount%360;			if(convertedDegrees < 0){				convertedDegrees += 360;			}			return convertedDegrees;		}					}}