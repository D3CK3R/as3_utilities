package com.pixelrevision.display{		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;		/**	 * @class GridContainer	 * @description Take display objects and lays them out on a grid that has a max width and/or height.  	 * Useful for laying out a bunch of content where you don't want to define the number of rows/columns.	 * @author pixelrevision	 * @version 1.0	 */		public class GridContainer extends Sprite {				private var _list:Array;		private var _index:int;		private var _pages:int;				private var _gridItems:Array;				private var _gridWidth:Number;		private var _gridHeight:Number;		private var _spacingX:Number;		private var _spacingY:Number;		private var _paddingX:Number;		private var _paddingY:Number;				private var _vAlign:String;		private var _hAlign:String;				/**		 * @constructor		 */		public function GridContainer(){			_index = 0;			_pages = 0;			_spacingX = 0;			_spacingY = 0;			_gridWidth = 0;			_gridHeight = 0;			_paddingX = 0;			_paddingY = 0;			_hAlign = "center";			_vAlign = "middle";			_list = [];		}						// --------------------------------------------------------------------------------------------------------------------- ITEM MANAGEMENT		/**		 * Adds an item to the grid		 * @param	item	 The item to use.		 */		public function addItem(item:DisplayObject):uint{			var i:uint = _list.push(item)-1;			update();			return i;		} 				/**		 * Removes an item from the grid		 * @param	item	 The item to remove.		 */		public function removeItem(item:DisplayObject):DisplayObject{			var i:uint;			for(i=0; i<_list.length; i++){				if(_list[i] == item){					_list.splice(i, 1);					break;				}			}			update();			return item;		}				/**		 * Adds an item to the grid at a specific position.		 * @param	item	 The item to add.		 * @param	i	 The index point to insert the item.		 */		public function addItemAt(item:DisplayObject, i:uint):DisplayObject{			_list.splice(i, -1, item);			update();			return item;		}				/**		 * Removes an item from the grid at a specific position.		 * @param	i	 The position of the item to remove.		 */		public function removeItemAt(i:uint):DisplayObject{			var item:DisplayObject = _list[i];			_list.splice(i, 1);			update();			return item;		}				/**		 * Checks if an item is in the grid		 * @param	item	 The item to check.		 */		public function containsItem(item:DisplayObject):Boolean{			var i:uint;			for(i=0; i<_list.length; i++){				if(_list[i] == item){					return true;				}			}			return false;		}				// --------------------------------------------------------------------------------------------------------------------- UPDATES		/**		 * Updates the grid		 */		public function update():void{			// remove everything			while(numChildren > 0){				removeChildAt(0);			}			// look to see if we have a value for spacing y			_gridItems = [];			var i:uint;			var xPos:Number = _paddingX;			var yPos:Number = _paddingY;			var maxWidth:Number = _spacingX;			// get some default spacing if needed			var spaceX:Number = _spacingX == 0 ? getSpacing("width") : _spacingX;			var spaceY:Number = _spacingY == 0 ? getSpacing("height") : _spacingY;			_pages = 1;			var pageFlags:Array = [];			for(i=0; i<_list.length; i++){				_list[i].x = xPos;				if(_hAlign == "center"){					_list[i].x += (spaceX - _list[i].width)/2;				}else if(_hAlign == "right"){					_list[i].x += spaceX - _list[i].width;				}								_list[i].y = yPos;				if(_vAlign == "middle"){					_list[i].y += (spaceY - _list[i].height)/2;				}else if(_vAlign == "bottom"){					_list[i].y += spaceY - _list[i].height;				}								xPos += spaceX + _paddingX;				pageFlags[i] = _pages - 1;				if(xPos > _gridWidth && _gridWidth > 0){					xPos = _paddingX;					yPos += spaceY + _paddingY;					// now check for the pages					if(yPos > _gridHeight && _gridHeight > 0 && i != _list.length-1){						yPos = _paddingY;						_pages += 1;					}				}			}			// now add it if we're on the right page			for(i=0; i<pageFlags.length; i++){				if(pageFlags[i] == _index){					addChild(_list[i]);				}			}			dispatchEvent( new Event("gridUpdated") );		}				private function getSpacing(prop:String):Number{			var space:Number = 0;			var i:uint;			for(i=0; i<_list.length; i++){				if(_list[i][prop] > space){					space = _list[i][prop];				}			}			return space;		}		// --------------------------------------------------------------------------------------------------------------------- GRID LAYOUT				/**		 * Sets the max width of the grid		 */		public function set gridWidth(value:Number):void{			_gridWidth  = value;			update();				}		public function get gridWidth():Number{			return _gridWidth;		}				/**		 * Sets the max height of the grid		 */		public function set gridHeight(value:Number):void{			_gridHeight  = value;			update();		}		public function get gridHeight():Number{			return _gridHeight;		}				/**		 * Sets the horizontal spacing of each item in the grid.  If left alone will use the largest item's width. 		 */		public function set spacingX(value:Number):void{			_spacingX  = value;			update();		}		public function get spacingY():Number{			return _spacingY;		}				/**		 * Sets the vertical spacing of each item in the grid.  If left alone will use the largest item's height. 		 */		public function set spacingY(value:Number):void{			_spacingY  = value;			update();		}		public function get spacingX():Number{			return _spacingX;		}				/**		 * Sets the horizontal padding between each item on the grid.		 */		public function set paddingX(value:Number):void{			_paddingX  = value;			update();		}		public function get paddingX():Number{			return _paddingX;		}				/**		 * Sets the vertical padding between each item on the grid.		 */		public function set paddingY(value:Number):void{			_paddingY  = value;			update();		}		public function get paddingY():Number{			return _paddingY;		}				/**		 * Sets the alignment of each image. values are 'top', 'middle' and 'bottom'		 */		public function set vAlign(value:String):void{			_vAlign  = value;			update();		}		public function get vAlign():String{			return _vAlign;		}				/**		 * Sets the alignment of each image. values are 'left', 'center' and 'right'		 */		public function set hAlign(value:String):void{			_hAlign  = value;			update();		}		public function get hAlign():String{			return _vAlign;		}				// --------------------------------------------------------------------------------------------------------------------- NAVIGATION				/**		 * Goes to the next page of items		 */		public function next():void{			if(index < _pages-1){				index += 1;			}		}				/**		 * Goes to the previous page of items		 */		public function back():void{			if(index > 0){				index -= 1;			}		}				/**		 * Goes to the first page of items.		 */		public function first():void{			index = 0;		}				/**		 * Goes to the last page of items.		 */		public function last():void{			index = _pages-1;		}				/**		 * The index of the page.		 */		public function set index(value:int):void{			if(value >= _pages){				value = 0;			}else if(value < 0){				value = _pages - 1;			}			_index = value;			update();		}		public function get index():int{			return _index;		}				/**		 * The total number of pages available.		 */		public function get pagesTotal():uint{			return _pages;		}	}}