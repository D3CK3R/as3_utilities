package com.pixelrevision.type{		import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;			public class ParticleText extends Sprite{				private var _sprites:Array;		private var _fields:Array;		private var _text:String = "";		private var _startX:Array ;		private var _startY:Array;				private var _vertAlign:String;		private var _horizAlign:String;				private var _textFormat:TextFormat;						/**		 * Creates a TextObject to use for particleText		 * @param	targetTextfield	The text field to inherit properties of.		 */		public function ParticleText(targetTextfield:TextField){			super();						var startX:Number = 0;			var startY:Number = 0;						_sprites = new Array();						if(targetTextfield.embedFonts == false){				trace("The fonts could not be embedded.");			}			// set the default align			_horizAlign = "center";			_vertAlign = "middle";						// get with all the format options			_textFormat = new TextFormat();			_textFormat = targetTextfield.getTextFormat();						createText(targetTextfield.text);		}				private function createText(text:String):void{			// this makes the text			cleartext();						var letters:Array = text.split("");			for(var i:uint=0; i<letters.length; i++){				_sprites[i] = new Sprite();				_fields[i] = new TextField();				_fields[i].selectable = false;				_fields[i].multiline = false;				_fields[i].defaultTextFormat = _textFormat;				_fields[i].text = letters[i];				_fields[i].autoSize = "left";				_sprites[i].addChild(_fields[i]);				this.addChild(_sprites[i]);			}						alignText();					}						private function alignText():void{			var offsetX:Number;			var offsetY:Number;			var startX:Number = 0;			var startY:Number = 0;			_startX = new Array();			_startY = new Array();						for(var i:uint=0; i<_sprites.length; i++){				// HORIZONTAL				if(_horizAlign == "center"){					// center 					offsetX = _fields[i].textWidth/2;				}else if(_horizAlign == "right"){					// right					offsetX = _fields[i].textWidth;				}else{					// left					offsetX = 0;				}				_sprites[i].x = startX + offsetX;				_fields[i].x = -offsetX;				_startX[i] = _sprites[i].x;								startX += _fields[i].textWidth;								// VERTICAL				if(_vertAlign == "middle"){					// middle 					offsetY = _fields[i].textHeight/2;				}else if(_vertAlign == "bottom"){					// bottom 					offsetY = _fields[i].textHeight;				}else{					// top					offsetY = 0;				}								_sprites[i].y = startY + offsetY;				_fields[i].y = -offsetY;				_startX[i] = _sprites[i].y;			}		}						// destroys the text		private function cleartext():void{			for(var i:uint=0; i<_sprites.length; i++){				this.removeChild(_sprites[i]);				_sprites[i] = null;			}			_sprites = new Array();			_fields = new Array();			_startX = new Array();			_startY = new Array();		}						/**		 * Sets the text of the particle text clip.		 */		public function set text(value:String):void{			_text = value;			createText(_text);		}		public function get text():String{			return _text;		}				/**		 * Gets the list of sprites		 */		public function get sprites():Array{			return _sprites;		}				/**		 * Gets the list of start x positions		 */		public function get startX():Array{			return _startX;		}				/**		 * Gets the list of start y positions		 */		public function get startY():Array{			return _startY;		}				/**		 * Sets the horizontal alignment of each letter		 */		public function set horizontalAlign(value:String):void{			_horizAlign = value;			alignText();		}		public function get horizontalAlign():String{			return _horizAlign;		}				/**		 * Sets the vertical alignment of each letter		 */		public function set verticalAlign(value:String):void{			_vertAlign = value;			alignText();		}		public function get verticalAlign():String{			return _vertAlign;		}					}}