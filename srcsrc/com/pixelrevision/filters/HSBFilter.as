package com.pixelrevision.filters{		import flash.filters.ColorMatrixFilter;			public class HSBFilter{				private var matrix:Array = new Array();		private static var IDENTITY:Array =[1,0,0,0,0,											  0,1,0,0,0,											  0,0,1,0,0,											  0,0,0,1,0];						// RGB to Luminance conversion constants as found on		// Charles A. Poynton's colorspace-faq:		// http://www.faqs.org/faqs/graphics/colorspace-faq/				private static var r_lum:Number = 0.212671;		private static var g_lum:Number = 0.715160;		private static var b_lum:Number = 0.072169;				private var _filter:ColorMatrixFilter;				private var _h:Number;		private var _s:Number;		private var _b:Number;						public function HSBFilter(h:Number=0, s:Number=100, b:Number=0){			// matrix = IDENTITY.concat();			_h = h;			_s = s;			_b = b;			reset();			_filter= new ColorMatrixFilter(matrix);			update();					}		public function reset():void{			matrix = IDENTITY.concat();		}				/**		* Hue (0-360)		*/		public function set h(value:Number):void{			_h = value%360;			if(_h < 0){				_h += 360;			}			update();		}		public function get h():Number{			return _h;		}				/**		* Saturation (0-*)		*/		public function set s(value:Number):void{			_s = value;			update();		}		public function get s():Number{			return _s;		}				/**		* Brightness (-100 - 100)		*/		public function set b(value:Number):void{			_b = value;			update();		}		public function get b():Number{			return _b;		}				public function update():void{			reset();			adjustHue(_h);			adjustSaturation(_s/100);			var bright:Number = 255*_b/100;			adjustBrightness(bright, bright, bright );			_filter.matrix = matrix;		}				private function adjustHue(angle:Number):void{					angle *= Math.PI/180;						var c:Number = Math.cos( angle );			var s:Number = Math.sin( angle );						var f1:Number = 0.213;			var f2:Number = 0.715;			var f3:Number = 0.072;						var mat:Array = [(f1 + (c * (1 - f1))) + (s * (-f1)), (f2 + (c * (-f2))) + (s * (-f2)), (f3 + (c * (-f3))) + (s * (1 - f3)), 0, 0, (f1 + (c * (-f1))) + (s * 0.143), (f2 + (c * (1 - f2))) + (s * 0.14), (f3 + (c * (-f3))) + (s * -0.283), 0, 0, (f1 + (c * (-f1))) + (s * (-(1 - f1))), (f2 + (c * (-f2))) + (s * f2), (f3 + (c * (1 - f3))) + (s * f3), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1							];						concat(mat);		}				private function adjustSaturation( s:Number ):void{			var isa:Number=1-s;						var irlum:Number = isa * r_lum;			var iglum:Number = isa * g_lum;			var iblum:Number = isa * b_lum;							var mat:Array = 	[irlum + s, iglum    , iblum    , 0, 0,									irlum    , iglum + s, iblum    , 0, 0,									irlum    , iglum    , iblum + s, 0, 0,									0        , 0        , 0        , 1, 0 ];								concat(mat);		}				private function adjustBrightness(r:Number, g:Number, b:Number):void{			g = g || r;			b = b || r;						var mat:Array = [1,0,0,0,r,							   0,1,0,0,g ,							   0,0,1,0,b ,							   0,0,0,1,0];					concat(mat);					}				private function concat(mat:Array):void{						var temp:Array = new Array();			var i:Number = 0;						for (var y:Number = 0; y < 4; y++ ){				for (var x:Number = 0; x < 5; x++ ){					temp[i + x] = mat[i    ] * matrix[x     ] + 								   mat[i+1] * matrix[x +  5] + 								   mat[i+2] * matrix[x + 10] + 								   mat[i+3] * matrix[x + 15] +								   (x == 4 ? mat[i+4] : 0);				}				i+=5;			}			matrix = temp;		}				/**		* The filter to apply		*/		public function get filter():ColorMatrixFilter{			return _filter;		}	}}