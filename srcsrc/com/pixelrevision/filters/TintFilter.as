package com.pixelrevision.filters{	import flash.filters.ColorMatrixFilter;	/**	 * @class TintFilter	 * @description The TintFilter class lets you control the tinting of an object.	 * @author pixelrevision	 * @version 1.0	 * @usage	 *	 * import com.pixelrevision.filters.TintFilter;	 * 	 * var myFilter = new TintFilter(255, 0, 0, 0);	 * this.onEnterFrame = function(){	 * 	myFilter.amount += 1;	 * 	myClip.filters = [myFilter];	 * }	 * 	 */	public class TintFilter{			// RGB to Luminance conversion constants as found on		// Charles A. Poynton's colorspace-faq:		// http://www.faqs.org/faqs/graphics/colorspace-faq/		private static var r_lum:Number = 0.212671;		private static var g_lum:Number = 0.715160;		private static var b_lum:Number = 0.072169;		private static var IDENTITY:Array = [1,0,0,0,0,											 0,1,0,0,0,											 0,0,1,0,0,											 0,0,0,1,0];		public var _matrix:Array;		private var _r:Number = 0;		private var _g:Number = 0;		private var _b:Number = 0;		private var _amount:Number = 0;			public var filter:ColorMatrixFilter;				/** 		* Creates the filter.		* 		* @param	r	Red.  Default is 0.		* @param	g	Green. Default is 0.		* @param	b	Blue. Default is 0.		* @param	amount	Amount. Default is 0.		*/		public function TintFilter(r:Number = 255, g:Number = 255, b:Number = 255, amount:Number= 1){						filter = new ColorMatrixFilter();					_r = r;			_g = g;			_b = b;			_amount = amount;						update();		}			private function reset():void{			filter.matrix = IDENTITY.concat();		}		/**		* The amount of red (0-255).		*/		public function get r():Number {	        return _r;	    }	    public function set r(value:Number):void {	        _r = value;			update();	    }			/**		* The amount of green (0-255).		*/		public function get g():Number {	        return _g;	    }	    public function set g(value:Number):void {	        _g = value;			update();	    }			/**		* The amount of blue (0-255).		*/		public function get b():Number {	        return _b;	    }	    public function set b(value:Number):void {	 		_b = value;			update();	    }			/**		* The amount of color to apply (0-1).		*/		public function get amount():Number {	        return _amount;	    }	    public function set amount(value:Number):void {			if(value < 0){				value = 0;			}	        _amount = value;			update();	    }				private function update():void{			reset();			colorize(_r/255, _g/255, _b/255, _amount);		}			private function colorize ( r:Number, g:Number, b:Number, amount:Number=1):void{				// if ( amount == null) amount = 1;				var inv_amount:Number = 1 - amount;				var mat:Array =  		[inv_amount + amount*r*r_lum, amount*r*g_lum,  amount*r*b_lum, 0, 0,							  			 amount*g*r_lum, inv_amount + amount*g*g_lum, amount*g*b_lum, 0, 0,							   			 amount*b*r_lum,amount*b*g_lum, inv_amount + amount*b*b_lum, 0, 0,							    		 0 , 0 , 0 , 1, 0 ];				concat(mat);			}			private function concat(mat:Array):void{				var temp:Array = new Array();				var i:Number = 0;				for (var y:Number = 0; y < 4; y++ ){					for (var x:Number = 0; x < 5; x++ ){						temp[i + x] = mat[i    ] * filter.matrix[x     ] + 									   mat[i+1] * filter.matrix[x +  5] + 									   mat[i+2] * filter.matrix[x + 10] + 									   mat[i+3] * filter.matrix[x + 15] +									   (x == 4 ? mat[i+4] : 0);					}					i+=5;				}				filter.matrix = temp;			}	}	}