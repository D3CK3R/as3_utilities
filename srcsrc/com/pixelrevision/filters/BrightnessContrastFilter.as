package com.pixelrevision.filters{		import flash.filters.ColorMatrixFilter;	import flash.geom.Matrix;			public class BrightnessContrastFilter{				private var matrix:Array = new Array();		private static var IDENTITY:Array =[1,0,0,0,0,											  0,1,0,0,0,											  0,0,1,0,0,											  0,0,0,1,0];						// RGB to Luminance conversion constants as found on		// Charles A. Poynton's colorspace-faq:		// http://www.faqs.org/faqs/graphics/colorspace-faq/				private static var r_lum:Number = 0.212671;		private static var g_lum:Number = 0.715160;		private static var b_lum:Number = 0.072169;				private var _filter:ColorMatrixFilter;				private var _b:Number;		private var _c:Number;						/**		 * Creates the filter.		 * @param	b	Brightness		 * @param	c	Contrast		 */		public function BrightnessContrastFilter(b:Number = 0, c:Number = 0){			_b = b;			_c = c;			reset();						_filter= new ColorMatrixFilter(matrix);		}				public function reset():void{			matrix = IDENTITY.concat();		}				public function update():void{			reset();			var cont:Number = _c/100;			adjustContrast (cont, cont, cont);			var bright:Number = 255*_b/100;			adjustBrightness(bright, bright, bright );			_filter.matrix = matrix;		}				/**		 * Brightness (-100 - 100)		 */		public function set b(value:Number):void{			_b = value;			update();		}		public function get b():Number{			return _b;		}				/**		* Contrast (0-*)		*/		public function set c(value:Number):void{			_c = value;			update();		}		public function get c():Number{			return _c;		}						private function adjustBrightness(r:Number, g:Number, b:Number):void{			g = g || r;			b = b || r;						var mat:Array = [1,0,0,0,r,							   0,1,0,0,g ,							   0,0,1,0,b ,							   0,0,0,1,0];			concat(mat);					}				public function adjustContrast( r:Number, g:Number, b:Number ):void{			g = g || r;			b = b || r;						r+=1;			g+=1;			b+=1;			var mat:Array =  [r,0,0,0,128*(1-r),							   0,g,0,0,128*(1-g),							   0,0,b,0,128*(1-b),							   0,0,0,1,0];			concat(mat);		}				private function concat(mat:Array):void{						var temp:Array = new Array();			var i:Number = 0;						for (var y:Number = 0; y < 4; y++ ){				for (var x:Number = 0; x < 5; x++ ){					temp[i + x] = mat[i    ] * matrix[x     ] + 								   mat[i+1] * matrix[x +  5] + 								   mat[i+2] * matrix[x + 10] + 								   mat[i+3] * matrix[x + 15] +								   (x == 4 ? mat[i+4] : 0);				}				i+=5;			}			matrix = temp;		}				/**		* The filter to apply		*/		public function get filter():ColorMatrixFilter{			return _filter;		}	}}