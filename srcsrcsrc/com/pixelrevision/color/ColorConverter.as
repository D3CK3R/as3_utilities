package com.pixelrevision.color{			/**	 * @class ColorConverter	 * @description Converts common color values.	 * @author pixelrevision	 * @version 0.9	 */		// you can find these equations and more at: http://www.easyrgb.com/math.php		public class ColorConverter{				/**		 * Converts a hex value to rgb values		 *		 * @param	hex		A hex value to convert.		 * @return	An object with RGB values. r, g, b.		 */		public static function hex2rgb(hex:Number):Object{			var convertedColor:Object = new Object();			convertedColor.r = hex >> 16;			convertedColor.g = (hex & 0x00FF00) >> 8;			convertedColor.b = hex & 0x0000FF;			return convertedColor;		}				/**		 * Converts rgb values to hex		 *		 * @param	r	red (0-255).		 * @param	g	green (0-255).		 * @param	b	blue (0-255).		 * @return	An rgb hex value.		 */		public static function rgb2hex(r:Number, g:Number, b:Number):Number{			var convertedColor:Array = new Array();			convertedColor["r"] = r.toString(16);			convertedColor["g"] = g.toString(16);			convertedColor["b"] = b.toString(16);			// check to see if the string length is too long			for(var hexData:String in convertedColor){				if(convertedColor[hexData].length < 2){					convertedColor[hexData] = "0" + convertedColor[hexData];				}			}			var val:String = "0x" + convertedColor["r"] + convertedColor["g"] + convertedColor["b"];			var hexValue:Number = Number(val);			return hexValue;		}				/**		 * Converts hsv values to rgb		 *		 * @param	h	hue.		 * @param	s	saturation.		 * @param	b	brightness.		 * @return	An object with RGB values. r, g, b.		 */		public static function hsv2rgb(h:Number, s:Number, b:Number):Object{									var convertedColor:Object = new Object();			h %= 360;			if(b==0) {				convertedColor.r = 0;				convertedColor.g = 0;				convertedColor.b = 0;				return convertedColor;			}			s /= 100;			b /= 100;			h /= 60;			var i:Number = Math.floor(h);			var f:Number = h-i;			var p:Number = b*(1-s);			var q:Number = b*(1-(s*f));			var t:Number = b*(1-(s*(1-f)));			if(i == 0) {				convertedColor.r = b; 				convertedColor.g = t; 				convertedColor.b = p;			}else if(i == 1) {				convertedColor.r = q; 				convertedColor.g = b; 				convertedColor.b = p;			}else if(i == 2) {				convertedColor.r = p; 				convertedColor.g =b; 				convertedColor.b = t;			}else if(i==3) {				convertedColor.r = p; 				convertedColor.g = q; 				convertedColor.b = b;			}else if(i==4) {				convertedColor.r = t; 				convertedColor.g = p; 				convertedColor.b = b;			}else if(i==5) {				convertedColor.r = b; 				convertedColor.g = p; 				convertedColor.b = q;			}			convertedColor.r = Math.round(convertedColor.r * 255);			convertedColor.g = Math.round(convertedColor.g * 255);			convertedColor.b = Math.round(convertedColor.b * 255);						return convertedColor;		}				/**		 * Converts rgb values to hsb		 *		 * @param	r	red (0-255).		 * @param	g	green (0-255).		 * @param	b	blue (0-255).		 * @return	An object with HSB values. h, s, b.		 */		public static function rgb2hsb(red:Number, grn:Number, blu:Number):Object{			var convertedColor:Object = new Object();						// var x, val, f, i, hue, sat, val;			red /= 255;			grn /= 255;			blu /= 255;			var x:Number = Math.min(Math.min(red, grn), blu);			var val:Number = Math.max(Math.max(red, grn), blu);			if (x==val){				convertedColor.h = undefined;				convertedColor.s = 0;				convertedColor.b = val*100;				return convertedColor;			}			var f:Number = (red == x) ? grn-blu : ((grn == x) ? blu-red : red-grn);			var i:Number = (red == x) ? 3 : ((grn == x) ? 5 : 1);			convertedColor.h = Math.round((i-f/(val-x))*60) % 360;			convertedColor.s = Math.round(((val-x)/val) * 100);			convertedColor.b = Math.round(val * 100);						return convertedColor;		}				/**		 * Converts cmy values to rgb;		 *		 * @param	c	cyan (0-1).		 * @param	m	magenta (0-1).		 * @param	y	yellow (0-1).		 * @return	An object with RGB values.		 */		public static function cmy2rgb(c:Number, m:Number, y:Number):Object{			var convertedColor:Object = new Object();			convertedColor.r = ( 1 - c ) * 255;			convertedColor.g = ( 1 - m ) * 255;			convertedColor.b = ( 1 - y ) * 255;						return convertedColor;		}						/**		 * Converts rgb values to cmy	 	 *		 * @param	r	red (0-255).		 * @param	g	green (0-255).		 * @param	b	blue (0-255).		 * @return	An object with CMY values.		 */		public static function rgb2cmy(r:Number, g:Number, b:Number):Object{			var convertedColor:Object = new Object();			convertedColor.c = (r / 255);			convertedColor.m = (g / 255);			convertedColor.y = (b / 255);						return convertedColor;		}				/**		 * Converts cmy values to cmyk		 *		 * @param	c	cyan (0-1).		 * @param	m	magenta (0-1).		 * @param	y	yellow (0-1).		 * @return	An object with CMYK values.		 */		public static function cmy2cmyk(c:Number, m:Number, y:Number):Object{			var convertedColor:Object = new Object();			var k:Number = 1;			if (c < k){				k = c;			}			if (m < k){				k = m;			}			if (y < k){				k = y;			}			if (k == 1) { //Black			   c = 0;			   m = 0;			   y = 0;			}else{			   c = ( c - k ) / ( 1 - k )			   m = ( m - k ) / ( 1 - k )			   y = ( y - k ) / ( 1 - k )			}			k = k;			convertedColor.c = c;			convertedColor.m = m;			convertedColor.y = y;			convertedColor.k = k;						return convertedColor;		}				/**		 * Converts cmyk values to cmy		 *		 * @param	c	cyan (0-1).		 * @param	m	magenta (0-1).		 * @param	y	yellow (0-1).		 * @param	k	black (0-1).		 * @return	An object with CMYK values.		 */		public static function cmyk2cmy(c:Number, m:Number, y:Number, k:Number):Object{			var convertedColor:Object = new Object();			convertedColor.c = ( c * ( 1 - k ) + k );			convertedColor.m = ( m * ( 1 - k ) + k );			convertedColor.y = ( y * ( 1 - k ) +k );						return convertedColor;		}			}	}