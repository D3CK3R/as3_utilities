package com.pixelrevision.utilities{		/**	* @class NumberFormatter	* @description Helps format numbers for readability.  Useful for currency display and game scores.	* @author pixelrevision	* @version 0.9	* 	*/	public class NumberFormatter{			/**		 * Forces a string number to be returned formatted with a specified decimal range.		 * @param	numberToFormat	The number to format.		 * @param	charCount	The number of decimal places to use.		 */		public static function forceDecimals(numberToFormat:String, charCount:Number = 2):String{			trace(numberToFormat);						var appended:String = "";			var splitNum:Array = numberToFormat.split(".");						var i:uint;			if(splitNum[1] == undefined){				for(i=0; i<charCount; i++){					appended += "0";				}			}else{				appended = splitNum[1].slice(0, charCount);				for(i=appended.length; i<charCount; i++){					appended += "0";				}			}			return splitNum[0] + "." +  appended;					}			/**		 * Forces a string number to be returned formatted with a specified amount of digits.		 * @param	numberToFormat	The number to format.		 * @param	charCount	The number of digits to use.		 */		public static function forceBaseNumber(numberToFormat:String, charCount:Number = 5):String{						var appended:String = "";			var splitNum:Array = numberToFormat.split(".");						var i:uint;			if(splitNum[0] == undefined){				for(i=0; i<charCount; i++){					appended += "0";				}			}else{				var addRight:String = splitNum[0].slice(0, charCount);				var addLeft:String = "";				for(i=addRight.length; i<charCount; i++){					addLeft += "0";				}						}			appended = addLeft + addRight;			return appended + "." +  splitNum[1];		}			/**		 * Forces a number to have characters at certian places.  This is built for adding comma or decimals		 * @param	numberToFormat	The number to format.		 * @param	characterToAdd	The character to use.		 * @param	charPosition	The position to put the character.		 * @param	count	The amount of times to repeat.		 */		public static function addCommas(numberToFormat:String, characterToAdd:String = ",", charPosition:Number = 3, count:Number = Number.POSITIVE_INFINITY):String{						var loopPoint:Number = 0;					var a1:Array = numberToFormat.split(".");			var s2:String = "";			var l:uint = a1[0].length;						while(l--) {				if(loopPoint >= count){					break;				}				if(l < a1[0].length - 1 && (a1[0].length - l - 1) % charPosition == 0) s2 = characterToAdd + s2;				s2 = a1[0].substr(l, 1) + s2;				loopPoint ++;			}			if(a1.length > 1) s2 += "." + a1[1];			return(s2);					}	}	}